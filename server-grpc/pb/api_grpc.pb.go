// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: api.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ApiService_GetServices_FullMethodName              = "/pb.ApiService/GetServices"
	ApiService_CreateUpdateServices_FullMethodName     = "/pb.ApiService/CreateUpdateServices"
	ApiService_CreateUpdateEducations_FullMethodName   = "/pb.ApiService/CreateUpdateEducations"
	ApiService_GetEducations_FullMethodName            = "/pb.ApiService/GetEducations"
	ApiService_GetEducation_FullMethodName             = "/pb.ApiService/GetEducation"
	ApiService_CreateUpdateBlogs_FullMethodName        = "/pb.ApiService/CreateUpdateBlogs"
	ApiService_GetBlogs_FullMethodName                 = "/pb.ApiService/GetBlogs"
	ApiService_GetUser_FullMethodName                  = "/pb.ApiService/GetUser"
	ApiService_CreateUpdateUser_FullMethodName         = "/pb.ApiService/CreateUpdateUser"
	ApiService_CreateUpdateSession_FullMethodName      = "/pb.ApiService/CreateUpdateSession"
	ApiService_GetSession_FullMethodName               = "/pb.ApiService/GetSession"
	ApiService_GetSessions_FullMethodName              = "/pb.ApiService/GetSessions"
	ApiService_CreateUpdateExperiences_FullMethodName  = "/pb.ApiService/CreateUpdateExperiences"
	ApiService_GetExperiences_FullMethodName           = "/pb.ApiService/GetExperiences"
	ApiService_GetExperience_FullMethodName            = "/pb.ApiService/GetExperience"
	ApiService_CreateUpdateLinks_FullMethodName        = "/pb.ApiService/CreateUpdateLinks"
	ApiService_GetLinks_FullMethodName                 = "/pb.ApiService/GetLinks"
	ApiService_CreateUpdateApplications_FullMethodName = "/pb.ApiService/CreateUpdateApplications"
	ApiService_GetApplications_FullMethodName          = "/pb.ApiService/GetApplications"
	ApiService_CreateUpdatePortfolios_FullMethodName   = "/pb.ApiService/CreateUpdatePortfolios"
	ApiService_GetPortfolios_FullMethodName            = "/pb.ApiService/GetPortfolios"
	ApiService_GetWebsite_FullMethodName               = "/pb.ApiService/GetWebsite"
	ApiService_UpdateWebsite_FullMethodName            = "/pb.ApiService/UpdateWebsite"
	ApiService_GetMessages_FullMethodName              = "/pb.ApiService/GetMessages"
	ApiService_SendMessage_FullMethodName              = "/pb.ApiService/SendMessage"
	ApiService_GetTestimonials_FullMethodName          = "/pb.ApiService/GetTestimonials"
	ApiService_CreateUpdateTestimonials_FullMethodName = "/pb.ApiService/CreateUpdateTestimonials"
	ApiService_ToggleOrDelete_FullMethodName           = "/pb.ApiService/ToggleOrDelete"
	ApiService_GetPublicDetails_FullMethodName         = "/pb.ApiService/GetPublicDetails"
	ApiService_DeleteFile_FullMethodName               = "/pb.ApiService/DeleteFile"
	ApiService_CreateFile_FullMethodName               = "/pb.ApiService/CreateFile"
	ApiService_GetFiles_FullMethodName                 = "/pb.ApiService/GetFiles"
)

// ApiServiceClient is the client API for ApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiServiceClient interface {
	GetServices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListServiceRes, error)
	CreateUpdateServices(ctx context.Context, in *ServiceRes, opts ...grpc.CallOption) (*Empty, error)
	CreateUpdateEducations(ctx context.Context, in *EduRes, opts ...grpc.CallOption) (*Empty, error)
	GetEducations(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListEduRes, error)
	GetEducation(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*EduRes, error)
	CreateUpdateBlogs(ctx context.Context, in *BlogsRes, opts ...grpc.CallOption) (*Empty, error)
	GetBlogs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListBlogsRes, error)
	GetUser(ctx context.Context, in *UserRes, opts ...grpc.CallOption) (*UserRes, error)
	CreateUpdateUser(ctx context.Context, in *UserRes, opts ...grpc.CallOption) (*Empty, error)
	CreateUpdateSession(ctx context.Context, in *SessionRes, opts ...grpc.CallOption) (*SessionRes, error)
	GetSession(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*SessionRes, error)
	GetSessions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListSessionsRes, error)
	CreateUpdateExperiences(ctx context.Context, in *ExpRes, opts ...grpc.CallOption) (*Empty, error)
	GetExperiences(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListExpRes, error)
	GetExperience(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*ExpRes, error)
	CreateUpdateLinks(ctx context.Context, in *LinkRes, opts ...grpc.CallOption) (*Empty, error)
	GetLinks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListLinkRes, error)
	CreateUpdateApplications(ctx context.Context, in *AppRes, opts ...grpc.CallOption) (*Empty, error)
	GetApplications(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListAppRes, error)
	CreateUpdatePortfolios(ctx context.Context, in *PortfolioRes, opts ...grpc.CallOption) (*Empty, error)
	GetPortfolios(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListPortfolioRes, error)
	GetWebsite(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*WebsiteRes, error)
	UpdateWebsite(ctx context.Context, in *WebsiteReq, opts ...grpc.CallOption) (*Empty, error)
	GetMessages(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListMessageRes, error)
	SendMessage(ctx context.Context, in *MessageRes, opts ...grpc.CallOption) (*Empty, error)
	GetTestimonials(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListTestimonialRes, error)
	CreateUpdateTestimonials(ctx context.Context, in *TestimonialRes, opts ...grpc.CallOption) (*Empty, error)
	ToggleOrDelete(ctx context.Context, in *IdModel, opts ...grpc.CallOption) (*Empty, error)
	GetPublicDetails(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserRes, error)
	DeleteFile(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*Empty, error)
	CreateFile(ctx context.Context, in *FileReq, opts ...grpc.CallOption) (*Empty, error)
	GetFiles(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListFileRes, error)
}

type apiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiServiceClient(cc grpc.ClientConnInterface) ApiServiceClient {
	return &apiServiceClient{cc}
}

func (c *apiServiceClient) GetServices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListServiceRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListServiceRes)
	err := c.cc.Invoke(ctx, ApiService_GetServices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateUpdateServices(ctx context.Context, in *ServiceRes, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ApiService_CreateUpdateServices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateUpdateEducations(ctx context.Context, in *EduRes, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ApiService_CreateUpdateEducations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetEducations(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListEduRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEduRes)
	err := c.cc.Invoke(ctx, ApiService_GetEducations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetEducation(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*EduRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EduRes)
	err := c.cc.Invoke(ctx, ApiService_GetEducation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateUpdateBlogs(ctx context.Context, in *BlogsRes, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ApiService_CreateUpdateBlogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetBlogs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListBlogsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBlogsRes)
	err := c.cc.Invoke(ctx, ApiService_GetBlogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetUser(ctx context.Context, in *UserRes, opts ...grpc.CallOption) (*UserRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserRes)
	err := c.cc.Invoke(ctx, ApiService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateUpdateUser(ctx context.Context, in *UserRes, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ApiService_CreateUpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateUpdateSession(ctx context.Context, in *SessionRes, opts ...grpc.CallOption) (*SessionRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SessionRes)
	err := c.cc.Invoke(ctx, ApiService_CreateUpdateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetSession(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*SessionRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SessionRes)
	err := c.cc.Invoke(ctx, ApiService_GetSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetSessions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListSessionsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSessionsRes)
	err := c.cc.Invoke(ctx, ApiService_GetSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateUpdateExperiences(ctx context.Context, in *ExpRes, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ApiService_CreateUpdateExperiences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetExperiences(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListExpRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListExpRes)
	err := c.cc.Invoke(ctx, ApiService_GetExperiences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetExperience(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*ExpRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExpRes)
	err := c.cc.Invoke(ctx, ApiService_GetExperience_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateUpdateLinks(ctx context.Context, in *LinkRes, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ApiService_CreateUpdateLinks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetLinks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListLinkRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLinkRes)
	err := c.cc.Invoke(ctx, ApiService_GetLinks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateUpdateApplications(ctx context.Context, in *AppRes, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ApiService_CreateUpdateApplications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetApplications(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListAppRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAppRes)
	err := c.cc.Invoke(ctx, ApiService_GetApplications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateUpdatePortfolios(ctx context.Context, in *PortfolioRes, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ApiService_CreateUpdatePortfolios_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetPortfolios(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListPortfolioRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPortfolioRes)
	err := c.cc.Invoke(ctx, ApiService_GetPortfolios_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetWebsite(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*WebsiteRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WebsiteRes)
	err := c.cc.Invoke(ctx, ApiService_GetWebsite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UpdateWebsite(ctx context.Context, in *WebsiteReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ApiService_UpdateWebsite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetMessages(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListMessageRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMessageRes)
	err := c.cc.Invoke(ctx, ApiService_GetMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SendMessage(ctx context.Context, in *MessageRes, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ApiService_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTestimonials(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListTestimonialRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTestimonialRes)
	err := c.cc.Invoke(ctx, ApiService_GetTestimonials_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateUpdateTestimonials(ctx context.Context, in *TestimonialRes, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ApiService_CreateUpdateTestimonials_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ToggleOrDelete(ctx context.Context, in *IdModel, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ApiService_ToggleOrDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetPublicDetails(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserRes)
	err := c.cc.Invoke(ctx, ApiService_GetPublicDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) DeleteFile(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ApiService_DeleteFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateFile(ctx context.Context, in *FileReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ApiService_CreateFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetFiles(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListFileRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFileRes)
	err := c.cc.Invoke(ctx, ApiService_GetFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServiceServer is the server API for ApiService service.
// All implementations must embed UnimplementedApiServiceServer
// for forward compatibility.
type ApiServiceServer interface {
	GetServices(context.Context, *Empty) (*ListServiceRes, error)
	CreateUpdateServices(context.Context, *ServiceRes) (*Empty, error)
	CreateUpdateEducations(context.Context, *EduRes) (*Empty, error)
	GetEducations(context.Context, *Empty) (*ListEduRes, error)
	GetEducation(context.Context, *IDReq) (*EduRes, error)
	CreateUpdateBlogs(context.Context, *BlogsRes) (*Empty, error)
	GetBlogs(context.Context, *Empty) (*ListBlogsRes, error)
	GetUser(context.Context, *UserRes) (*UserRes, error)
	CreateUpdateUser(context.Context, *UserRes) (*Empty, error)
	CreateUpdateSession(context.Context, *SessionRes) (*SessionRes, error)
	GetSession(context.Context, *IDReq) (*SessionRes, error)
	GetSessions(context.Context, *Empty) (*ListSessionsRes, error)
	CreateUpdateExperiences(context.Context, *ExpRes) (*Empty, error)
	GetExperiences(context.Context, *Empty) (*ListExpRes, error)
	GetExperience(context.Context, *IDReq) (*ExpRes, error)
	CreateUpdateLinks(context.Context, *LinkRes) (*Empty, error)
	GetLinks(context.Context, *Empty) (*ListLinkRes, error)
	CreateUpdateApplications(context.Context, *AppRes) (*Empty, error)
	GetApplications(context.Context, *Empty) (*ListAppRes, error)
	CreateUpdatePortfolios(context.Context, *PortfolioRes) (*Empty, error)
	GetPortfolios(context.Context, *Empty) (*ListPortfolioRes, error)
	GetWebsite(context.Context, *Empty) (*WebsiteRes, error)
	UpdateWebsite(context.Context, *WebsiteReq) (*Empty, error)
	GetMessages(context.Context, *Empty) (*ListMessageRes, error)
	SendMessage(context.Context, *MessageRes) (*Empty, error)
	GetTestimonials(context.Context, *Empty) (*ListTestimonialRes, error)
	CreateUpdateTestimonials(context.Context, *TestimonialRes) (*Empty, error)
	ToggleOrDelete(context.Context, *IdModel) (*Empty, error)
	GetPublicDetails(context.Context, *Empty) (*UserRes, error)
	DeleteFile(context.Context, *IDReq) (*Empty, error)
	CreateFile(context.Context, *FileReq) (*Empty, error)
	GetFiles(context.Context, *Empty) (*ListFileRes, error)
	mustEmbedUnimplementedApiServiceServer()
}

// UnimplementedApiServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedApiServiceServer struct{}

func (UnimplementedApiServiceServer) GetServices(context.Context, *Empty) (*ListServiceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServices not implemented")
}
func (UnimplementedApiServiceServer) CreateUpdateServices(context.Context, *ServiceRes) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUpdateServices not implemented")
}
func (UnimplementedApiServiceServer) CreateUpdateEducations(context.Context, *EduRes) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUpdateEducations not implemented")
}
func (UnimplementedApiServiceServer) GetEducations(context.Context, *Empty) (*ListEduRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEducations not implemented")
}
func (UnimplementedApiServiceServer) GetEducation(context.Context, *IDReq) (*EduRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEducation not implemented")
}
func (UnimplementedApiServiceServer) CreateUpdateBlogs(context.Context, *BlogsRes) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUpdateBlogs not implemented")
}
func (UnimplementedApiServiceServer) GetBlogs(context.Context, *Empty) (*ListBlogsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlogs not implemented")
}
func (UnimplementedApiServiceServer) GetUser(context.Context, *UserRes) (*UserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedApiServiceServer) CreateUpdateUser(context.Context, *UserRes) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUpdateUser not implemented")
}
func (UnimplementedApiServiceServer) CreateUpdateSession(context.Context, *SessionRes) (*SessionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUpdateSession not implemented")
}
func (UnimplementedApiServiceServer) GetSession(context.Context, *IDReq) (*SessionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSession not implemented")
}
func (UnimplementedApiServiceServer) GetSessions(context.Context, *Empty) (*ListSessionsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessions not implemented")
}
func (UnimplementedApiServiceServer) CreateUpdateExperiences(context.Context, *ExpRes) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUpdateExperiences not implemented")
}
func (UnimplementedApiServiceServer) GetExperiences(context.Context, *Empty) (*ListExpRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperiences not implemented")
}
func (UnimplementedApiServiceServer) GetExperience(context.Context, *IDReq) (*ExpRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperience not implemented")
}
func (UnimplementedApiServiceServer) CreateUpdateLinks(context.Context, *LinkRes) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUpdateLinks not implemented")
}
func (UnimplementedApiServiceServer) GetLinks(context.Context, *Empty) (*ListLinkRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLinks not implemented")
}
func (UnimplementedApiServiceServer) CreateUpdateApplications(context.Context, *AppRes) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUpdateApplications not implemented")
}
func (UnimplementedApiServiceServer) GetApplications(context.Context, *Empty) (*ListAppRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplications not implemented")
}
func (UnimplementedApiServiceServer) CreateUpdatePortfolios(context.Context, *PortfolioRes) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUpdatePortfolios not implemented")
}
func (UnimplementedApiServiceServer) GetPortfolios(context.Context, *Empty) (*ListPortfolioRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPortfolios not implemented")
}
func (UnimplementedApiServiceServer) GetWebsite(context.Context, *Empty) (*WebsiteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWebsite not implemented")
}
func (UnimplementedApiServiceServer) UpdateWebsite(context.Context, *WebsiteReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWebsite not implemented")
}
func (UnimplementedApiServiceServer) GetMessages(context.Context, *Empty) (*ListMessageRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessages not implemented")
}
func (UnimplementedApiServiceServer) SendMessage(context.Context, *MessageRes) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedApiServiceServer) GetTestimonials(context.Context, *Empty) (*ListTestimonialRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestimonials not implemented")
}
func (UnimplementedApiServiceServer) CreateUpdateTestimonials(context.Context, *TestimonialRes) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUpdateTestimonials not implemented")
}
func (UnimplementedApiServiceServer) ToggleOrDelete(context.Context, *IdModel) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleOrDelete not implemented")
}
func (UnimplementedApiServiceServer) GetPublicDetails(context.Context, *Empty) (*UserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicDetails not implemented")
}
func (UnimplementedApiServiceServer) DeleteFile(context.Context, *IDReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedApiServiceServer) CreateFile(context.Context, *FileReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFile not implemented")
}
func (UnimplementedApiServiceServer) GetFiles(context.Context, *Empty) (*ListFileRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFiles not implemented")
}
func (UnimplementedApiServiceServer) mustEmbedUnimplementedApiServiceServer() {}
func (UnimplementedApiServiceServer) testEmbeddedByValue()                    {}

// UnsafeApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServiceServer will
// result in compilation errors.
type UnsafeApiServiceServer interface {
	mustEmbedUnimplementedApiServiceServer()
}

func RegisterApiServiceServer(s grpc.ServiceRegistrar, srv ApiServiceServer) {
	// If the following call pancis, it indicates UnimplementedApiServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ApiService_ServiceDesc, srv)
}

func _ApiService_GetServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetServices(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateUpdateServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateUpdateServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_CreateUpdateServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateUpdateServices(ctx, req.(*ServiceRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateUpdateEducations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EduRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateUpdateEducations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_CreateUpdateEducations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateUpdateEducations(ctx, req.(*EduRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetEducations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetEducations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetEducations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetEducations(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetEducation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetEducation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetEducation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetEducation(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateUpdateBlogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogsRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateUpdateBlogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_CreateUpdateBlogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateUpdateBlogs(ctx, req.(*BlogsRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetBlogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetBlogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetBlogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetBlogs(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetUser(ctx, req.(*UserRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateUpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateUpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_CreateUpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateUpdateUser(ctx, req.(*UserRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateUpdateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateUpdateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_CreateUpdateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateUpdateSession(ctx, req.(*SessionRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetSession(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetSessions(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateUpdateExperiences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateUpdateExperiences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_CreateUpdateExperiences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateUpdateExperiences(ctx, req.(*ExpRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetExperiences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetExperiences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetExperiences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetExperiences(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetExperience_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetExperience(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetExperience_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetExperience(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateUpdateLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateUpdateLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_CreateUpdateLinks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateUpdateLinks(ctx, req.(*LinkRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetLinks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetLinks(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateUpdateApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateUpdateApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_CreateUpdateApplications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateUpdateApplications(ctx, req.(*AppRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetApplications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetApplications(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateUpdatePortfolios_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortfolioRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateUpdatePortfolios(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_CreateUpdatePortfolios_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateUpdatePortfolios(ctx, req.(*PortfolioRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetPortfolios_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetPortfolios(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetPortfolios_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetPortfolios(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetWebsite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetWebsite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetWebsite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetWebsite(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_UpdateWebsite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebsiteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).UpdateWebsite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_UpdateWebsite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).UpdateWebsite(ctx, req.(*WebsiteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetMessages(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SendMessage(ctx, req.(*MessageRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTestimonials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTestimonials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetTestimonials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTestimonials(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateUpdateTestimonials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestimonialRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateUpdateTestimonials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_CreateUpdateTestimonials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateUpdateTestimonials(ctx, req.(*TestimonialRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ToggleOrDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ToggleOrDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_ToggleOrDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ToggleOrDelete(ctx, req.(*IdModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetPublicDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetPublicDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetPublicDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetPublicDetails(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_DeleteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).DeleteFile(ctx, req.(*IDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_CreateFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateFile(ctx, req.(*FileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetFiles(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiService_ServiceDesc is the grpc.ServiceDesc for ApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ApiService",
	HandlerType: (*ApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServices",
			Handler:    _ApiService_GetServices_Handler,
		},
		{
			MethodName: "CreateUpdateServices",
			Handler:    _ApiService_CreateUpdateServices_Handler,
		},
		{
			MethodName: "CreateUpdateEducations",
			Handler:    _ApiService_CreateUpdateEducations_Handler,
		},
		{
			MethodName: "GetEducations",
			Handler:    _ApiService_GetEducations_Handler,
		},
		{
			MethodName: "GetEducation",
			Handler:    _ApiService_GetEducation_Handler,
		},
		{
			MethodName: "CreateUpdateBlogs",
			Handler:    _ApiService_CreateUpdateBlogs_Handler,
		},
		{
			MethodName: "GetBlogs",
			Handler:    _ApiService_GetBlogs_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _ApiService_GetUser_Handler,
		},
		{
			MethodName: "CreateUpdateUser",
			Handler:    _ApiService_CreateUpdateUser_Handler,
		},
		{
			MethodName: "CreateUpdateSession",
			Handler:    _ApiService_CreateUpdateSession_Handler,
		},
		{
			MethodName: "GetSession",
			Handler:    _ApiService_GetSession_Handler,
		},
		{
			MethodName: "GetSessions",
			Handler:    _ApiService_GetSessions_Handler,
		},
		{
			MethodName: "CreateUpdateExperiences",
			Handler:    _ApiService_CreateUpdateExperiences_Handler,
		},
		{
			MethodName: "GetExperiences",
			Handler:    _ApiService_GetExperiences_Handler,
		},
		{
			MethodName: "GetExperience",
			Handler:    _ApiService_GetExperience_Handler,
		},
		{
			MethodName: "CreateUpdateLinks",
			Handler:    _ApiService_CreateUpdateLinks_Handler,
		},
		{
			MethodName: "GetLinks",
			Handler:    _ApiService_GetLinks_Handler,
		},
		{
			MethodName: "CreateUpdateApplications",
			Handler:    _ApiService_CreateUpdateApplications_Handler,
		},
		{
			MethodName: "GetApplications",
			Handler:    _ApiService_GetApplications_Handler,
		},
		{
			MethodName: "CreateUpdatePortfolios",
			Handler:    _ApiService_CreateUpdatePortfolios_Handler,
		},
		{
			MethodName: "GetPortfolios",
			Handler:    _ApiService_GetPortfolios_Handler,
		},
		{
			MethodName: "GetWebsite",
			Handler:    _ApiService_GetWebsite_Handler,
		},
		{
			MethodName: "UpdateWebsite",
			Handler:    _ApiService_UpdateWebsite_Handler,
		},
		{
			MethodName: "GetMessages",
			Handler:    _ApiService_GetMessages_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _ApiService_SendMessage_Handler,
		},
		{
			MethodName: "GetTestimonials",
			Handler:    _ApiService_GetTestimonials_Handler,
		},
		{
			MethodName: "CreateUpdateTestimonials",
			Handler:    _ApiService_CreateUpdateTestimonials_Handler,
		},
		{
			MethodName: "ToggleOrDelete",
			Handler:    _ApiService_ToggleOrDelete_Handler,
		},
		{
			MethodName: "GetPublicDetails",
			Handler:    _ApiService_GetPublicDetails_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _ApiService_DeleteFile_Handler,
		},
		{
			MethodName: "CreateFile",
			Handler:    _ApiService_CreateFile_Handler,
		},
		{
			MethodName: "GetFiles",
			Handler:    _ApiService_GetFiles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
